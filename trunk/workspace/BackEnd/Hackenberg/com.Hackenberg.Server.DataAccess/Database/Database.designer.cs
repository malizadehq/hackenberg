#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.Hackenberg.Server.DataAccess.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hackenberg")]
	public partial class HackenbergDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDB_SessionMember(DB_SessionMember instance);
    partial void UpdateDB_SessionMember(DB_SessionMember instance);
    partial void DeleteDB_SessionMember(DB_SessionMember instance);
    partial void InsertDB_Session(DB_Session instance);
    partial void UpdateDB_Session(DB_Session instance);
    partial void DeleteDB_Session(DB_Session instance);
    partial void InsertDB_User(DB_User instance);
    partial void UpdateDB_User(DB_User instance);
    partial void DeleteDB_User(DB_User instance);
    partial void InsertDB_Map(DB_Map instance);
    partial void UpdateDB_Map(DB_Map instance);
    partial void DeleteDB_Map(DB_Map instance);
    partial void InsertDB_GameRule(DB_GameRule instance);
    partial void UpdateDB_GameRule(DB_GameRule instance);
    partial void DeleteDB_GameRule(DB_GameRule instance);
    partial void InsertDB_Rule(DB_Rule instance);
    partial void UpdateDB_Rule(DB_Rule instance);
    partial void DeleteDB_Rule(DB_Rule instance);
    partial void InsertDB_Game(DB_Game instance);
    partial void UpdateDB_Game(DB_Game instance);
    partial void DeleteDB_Game(DB_Game instance);
    partial void InsertDB_MapCountry(DB_MapCountry instance);
    partial void UpdateDB_MapCountry(DB_MapCountry instance);
    partial void DeleteDB_MapCountry(DB_MapCountry instance);
    partial void InsertDB_Country(DB_Country instance);
    partial void UpdateDB_Country(DB_Country instance);
    partial void DeleteDB_Country(DB_Country instance);
    partial void InsertDB_CountryForce(DB_CountryForce instance);
    partial void UpdateDB_CountryForce(DB_CountryForce instance);
    partial void DeleteDB_CountryForce(DB_CountryForce instance);
    partial void InsertDB_Force(DB_Force instance);
    partial void UpdateDB_Force(DB_Force instance);
    partial void DeleteDB_Force(DB_Force instance);
    partial void InsertDB_CountryStructure(DB_CountryStructure instance);
    partial void UpdateDB_CountryStructure(DB_CountryStructure instance);
    partial void DeleteDB_CountryStructure(DB_CountryStructure instance);
    partial void InsertDB_Structure(DB_Structure instance);
    partial void UpdateDB_Structure(DB_Structure instance);
    partial void DeleteDB_Structure(DB_Structure instance);
    #endregion
		
		public HackenbergDatabaseDataContext() : 
				base(global::com.Hackenberg.Server.DataAccess.Properties.Settings.Default.HackenbergConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DB_SessionMember> DB_SessionMembers
		{
			get
			{
				return this.GetTable<DB_SessionMember>();
			}
		}
		
		public System.Data.Linq.Table<DB_Session> DB_Sessions
		{
			get
			{
				return this.GetTable<DB_Session>();
			}
		}
		
		public System.Data.Linq.Table<DB_User> DB_Users
		{
			get
			{
				return this.GetTable<DB_User>();
			}
		}
		
		public System.Data.Linq.Table<DB_Map> DB_Maps
		{
			get
			{
				return this.GetTable<DB_Map>();
			}
		}
		
		public System.Data.Linq.Table<DB_GameRule> DB_GameRules
		{
			get
			{
				return this.GetTable<DB_GameRule>();
			}
		}
		
		public System.Data.Linq.Table<DB_Rule> DB_Rules
		{
			get
			{
				return this.GetTable<DB_Rule>();
			}
		}
		
		public System.Data.Linq.Table<DB_Game> DB_Games
		{
			get
			{
				return this.GetTable<DB_Game>();
			}
		}
		
		public System.Data.Linq.Table<DB_MapCountry> DB_MapCountries
		{
			get
			{
				return this.GetTable<DB_MapCountry>();
			}
		}
		
		public System.Data.Linq.Table<DB_Country> DB_Countries
		{
			get
			{
				return this.GetTable<DB_Country>();
			}
		}
		
		public System.Data.Linq.Table<DB_CountryForce> DB_CountryForces
		{
			get
			{
				return this.GetTable<DB_CountryForce>();
			}
		}
		
		public System.Data.Linq.Table<DB_Force> DB_Forces
		{
			get
			{
				return this.GetTable<DB_Force>();
			}
		}
		
		public System.Data.Linq.Table<DB_CountryStructure> DB_CountryStructures
		{
			get
			{
				return this.GetTable<DB_CountryStructure>();
			}
		}
		
		public System.Data.Linq.Table<DB_Structure> DB_Structures
		{
			get
			{
				return this.GetTable<DB_Structure>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_SessionMembers")]
	public partial class DB_SessionMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SessionId;
		
		private System.Guid _UserId;
		
		private EntityRef<DB_Session> _DB_Session;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(System.Guid value);
    partial void OnSessionIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public DB_SessionMember()
		{
			this._DB_Session = default(EntityRef<DB_Session>);
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._DB_Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Session_DB_SessionMember", Storage="_DB_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public DB_Session DB_Session
		{
			get
			{
				return this._DB_Session.Entity;
			}
			set
			{
				DB_Session previousValue = this._DB_Session.Entity;
				if (((previousValue != value) 
							|| (this._DB_Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Session.Entity = null;
						previousValue.DB_SessionMembers.Remove(this);
					}
					this._DB_Session.Entity = value;
					if ((value != null))
					{
						value.DB_SessionMembers.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_SessionMember", Storage="_DB_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_SessionMembers.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_SessionMembers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Sessions")]
	public partial class DB_Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private EntitySet<DB_SessionMember> _DB_SessionMembers;
		
		private EntitySet<DB_Game> _DB_Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public DB_Session()
		{
			this._DB_SessionMembers = new EntitySet<DB_SessionMember>(new Action<DB_SessionMember>(this.attach_DB_SessionMembers), new Action<DB_SessionMember>(this.detach_DB_SessionMembers));
			this._DB_Games = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games), new Action<DB_Game>(this.detach_DB_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Session_DB_SessionMember", Storage="_DB_SessionMembers", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<DB_SessionMember> DB_SessionMembers
		{
			get
			{
				return this._DB_SessionMembers;
			}
			set
			{
				this._DB_SessionMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Session_DB_Game", Storage="_DB_Games", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<DB_Game> DB_Games
		{
			get
			{
				return this._DB_Games;
			}
			set
			{
				this._DB_Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_SessionMembers(DB_SessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_Session = this;
		}
		
		private void detach_DB_SessionMembers(DB_SessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_Session = null;
		}
		
		private void attach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_Session = this;
		}
		
		private void detach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Users")]
	public partial class DB_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<DB_SessionMember> _DB_SessionMembers;
		
		private EntitySet<DB_Country> _DB_Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public DB_User()
		{
			this._DB_SessionMembers = new EntitySet<DB_SessionMember>(new Action<DB_SessionMember>(this.attach_DB_SessionMembers), new Action<DB_SessionMember>(this.detach_DB_SessionMembers));
			this._DB_Countries = new EntitySet<DB_Country>(new Action<DB_Country>(this.attach_DB_Countries), new Action<DB_Country>(this.detach_DB_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_SessionMember", Storage="_DB_SessionMembers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<DB_SessionMember> DB_SessionMembers
		{
			get
			{
				return this._DB_SessionMembers;
			}
			set
			{
				this._DB_SessionMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Country", Storage="_DB_Countries", ThisKey="Id", OtherKey="ControlledBy")]
		public EntitySet<DB_Country> DB_Countries
		{
			get
			{
				return this._DB_Countries;
			}
			set
			{
				this._DB_Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_SessionMembers(DB_SessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_SessionMembers(DB_SessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
		
		private void attach_DB_Countries(DB_Country entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_Countries(DB_Country entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Maps")]
	public partial class DB_Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private EntitySet<DB_Game> _DB_Games;
		
		private EntitySet<DB_MapCountry> _DB_MapCountries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DB_Map()
		{
			this._DB_Games = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games), new Action<DB_Game>(this.detach_DB_Games));
			this._DB_MapCountries = new EntitySet<DB_MapCountry>(new Action<DB_MapCountry>(this.attach_DB_MapCountries), new Action<DB_MapCountry>(this.detach_DB_MapCountries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_Game", Storage="_DB_Games", ThisKey="Id", OtherKey="MapId")]
		public EntitySet<DB_Game> DB_Games
		{
			get
			{
				return this._DB_Games;
			}
			set
			{
				this._DB_Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_MapCountry", Storage="_DB_MapCountries", ThisKey="Id", OtherKey="MapId")]
		public EntitySet<DB_MapCountry> DB_MapCountries
		{
			get
			{
				return this._DB_MapCountries;
			}
			set
			{
				this._DB_MapCountries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = this;
		}
		
		private void detach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = null;
		}
		
		private void attach_DB_MapCountries(DB_MapCountry entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = this;
		}
		
		private void detach_DB_MapCountries(DB_MapCountry entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_GameRules")]
	public partial class DB_GameRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RuleId;
		
		private System.Guid _GameId;
		
		private EntityRef<DB_Rule> _DB_Rule;
		
		private EntityRef<DB_Game> _DB_Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIdChanging(System.Guid value);
    partial void OnRuleIdChanged();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    #endregion
		
		public DB_GameRule()
		{
			this._DB_Rule = default(EntityRef<DB_Rule>);
			this._DB_Game = default(EntityRef<DB_Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._DB_Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._DB_Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Rule_DB_GameRule", Storage="_DB_Rule", ThisKey="RuleId", OtherKey="Id", IsForeignKey=true)]
		public DB_Rule DB_Rule
		{
			get
			{
				return this._DB_Rule.Entity;
			}
			set
			{
				DB_Rule previousValue = this._DB_Rule.Entity;
				if (((previousValue != value) 
							|| (this._DB_Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Rule.Entity = null;
						previousValue.DB_GameRules.Remove(this);
					}
					this._DB_Rule.Entity = value;
					if ((value != null))
					{
						value.DB_GameRules.Add(this);
						this._RuleId = value.Id;
					}
					else
					{
						this._RuleId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Rule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Game_DB_GameRule", Storage="_DB_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public DB_Game DB_Game
		{
			get
			{
				return this._DB_Game.Entity;
			}
			set
			{
				DB_Game previousValue = this._DB_Game.Entity;
				if (((previousValue != value) 
							|| (this._DB_Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Game.Entity = null;
						previousValue.DB_GameRules.Remove(this);
					}
					this._DB_Game.Entity = value;
					if ((value != null))
					{
						value.DB_GameRules.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Rules")]
	public partial class DB_Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Effect;
		
		private EntitySet<DB_GameRule> _DB_GameRules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    #endregion
		
		public DB_Rule()
		{
			this._DB_GameRules = new EntitySet<DB_GameRule>(new Action<DB_GameRule>(this.attach_DB_GameRules), new Action<DB_GameRule>(this.detach_DB_GameRules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Rule_DB_GameRule", Storage="_DB_GameRules", ThisKey="Id", OtherKey="RuleId")]
		public EntitySet<DB_GameRule> DB_GameRules
		{
			get
			{
				return this._DB_GameRules;
			}
			set
			{
				this._DB_GameRules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Rule = this;
		}
		
		private void detach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Games")]
	public partial class DB_Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SessionId;
		
		private System.Guid _MapId;
		
		private System.Nullable<int> _Phase;
		
		private int _Turn;
		
		private string _Name;
		
		private EntitySet<DB_GameRule> _DB_GameRules;
		
		private EntityRef<DB_Map> _DB_Map;
		
		private EntityRef<DB_Session> _DB_Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSessionIdChanging(System.Guid value);
    partial void OnSessionIdChanged();
    partial void OnMapIdChanging(System.Guid value);
    partial void OnMapIdChanged();
    partial void OnPhaseChanging(System.Nullable<int> value);
    partial void OnPhaseChanged();
    partial void OnTurnChanging(int value);
    partial void OnTurnChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DB_Game()
		{
			this._DB_GameRules = new EntitySet<DB_GameRule>(new Action<DB_GameRule>(this.attach_DB_GameRules), new Action<DB_GameRule>(this.detach_DB_GameRules));
			this._DB_Map = default(EntityRef<DB_Map>);
			this._DB_Session = default(EntityRef<DB_Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._DB_Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MapId
		{
			get
			{
				return this._MapId;
			}
			set
			{
				if ((this._MapId != value))
				{
					if (this._DB_Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapIdChanging(value);
					this.SendPropertyChanging();
					this._MapId = value;
					this.SendPropertyChanged("MapId");
					this.OnMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phase", DbType="Int")]
		public System.Nullable<int> Phase
		{
			get
			{
				return this._Phase;
			}
			set
			{
				if ((this._Phase != value))
				{
					this.OnPhaseChanging(value);
					this.SendPropertyChanging();
					this._Phase = value;
					this.SendPropertyChanged("Phase");
					this.OnPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Turn", DbType="Int NOT NULL")]
		public int Turn
		{
			get
			{
				return this._Turn;
			}
			set
			{
				if ((this._Turn != value))
				{
					this.OnTurnChanging(value);
					this.SendPropertyChanging();
					this._Turn = value;
					this.SendPropertyChanged("Turn");
					this.OnTurnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Game_DB_GameRule", Storage="_DB_GameRules", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<DB_GameRule> DB_GameRules
		{
			get
			{
				return this._DB_GameRules;
			}
			set
			{
				this._DB_GameRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_Game", Storage="_DB_Map", ThisKey="MapId", OtherKey="Id", IsForeignKey=true)]
		public DB_Map DB_Map
		{
			get
			{
				return this._DB_Map.Entity;
			}
			set
			{
				DB_Map previousValue = this._DB_Map.Entity;
				if (((previousValue != value) 
							|| (this._DB_Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Map.Entity = null;
						previousValue.DB_Games.Remove(this);
					}
					this._DB_Map.Entity = value;
					if ((value != null))
					{
						value.DB_Games.Add(this);
						this._MapId = value.Id;
					}
					else
					{
						this._MapId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Map");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Session_DB_Game", Storage="_DB_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true)]
		public DB_Session DB_Session
		{
			get
			{
				return this._DB_Session.Entity;
			}
			set
			{
				DB_Session previousValue = this._DB_Session.Entity;
				if (((previousValue != value) 
							|| (this._DB_Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Session.Entity = null;
						previousValue.DB_Games.Remove(this);
					}
					this._DB_Session.Entity = value;
					if ((value != null))
					{
						value.DB_Games.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Game = this;
		}
		
		private void detach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_MapCountries")]
	public partial class DB_MapCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MapId;
		
		private System.Guid _CountryId;
		
		private EntityRef<DB_Map> _DB_Map;
		
		private EntityRef<DB_Country> _DB_Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMapIdChanging(System.Guid value);
    partial void OnMapIdChanged();
    partial void OnCountryIdChanging(System.Guid value);
    partial void OnCountryIdChanged();
    #endregion
		
		public DB_MapCountry()
		{
			this._DB_Map = default(EntityRef<DB_Map>);
			this._DB_Country = default(EntityRef<DB_Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MapId
		{
			get
			{
				return this._MapId;
			}
			set
			{
				if ((this._MapId != value))
				{
					if (this._DB_Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapIdChanging(value);
					this.SendPropertyChanging();
					this._MapId = value;
					this.SendPropertyChanged("MapId");
					this.OnMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._DB_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_MapCountry", Storage="_DB_Map", ThisKey="MapId", OtherKey="Id", IsForeignKey=true)]
		public DB_Map DB_Map
		{
			get
			{
				return this._DB_Map.Entity;
			}
			set
			{
				DB_Map previousValue = this._DB_Map.Entity;
				if (((previousValue != value) 
							|| (this._DB_Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Map.Entity = null;
						previousValue.DB_MapCountries.Remove(this);
					}
					this._DB_Map.Entity = value;
					if ((value != null))
					{
						value.DB_MapCountries.Add(this);
						this._MapId = value.Id;
					}
					else
					{
						this._MapId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Map");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_MapCountry", Storage="_DB_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public DB_Country DB_Country
		{
			get
			{
				return this._DB_Country.Entity;
			}
			set
			{
				DB_Country previousValue = this._DB_Country.Entity;
				if (((previousValue != value) 
							|| (this._DB_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Country.Entity = null;
						previousValue.DB_MapCountries.Remove(this);
					}
					this._DB_Country.Entity = value;
					if ((value != null))
					{
						value.DB_MapCountries.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Countries")]
	public partial class DB_Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ControlledBy;
		
		private string _Name;
		
		private int _Points;
		
		private EntitySet<DB_MapCountry> _DB_MapCountries;
		
		private EntitySet<DB_CountryForce> _DB_CountryForces;
		
		private EntitySet<DB_CountryStructure> _DB_CountryStructures;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnControlledByChanging(System.Guid value);
    partial void OnControlledByChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public DB_Country()
		{
			this._DB_MapCountries = new EntitySet<DB_MapCountry>(new Action<DB_MapCountry>(this.attach_DB_MapCountries), new Action<DB_MapCountry>(this.detach_DB_MapCountries));
			this._DB_CountryForces = new EntitySet<DB_CountryForce>(new Action<DB_CountryForce>(this.attach_DB_CountryForces), new Action<DB_CountryForce>(this.detach_DB_CountryForces));
			this._DB_CountryStructures = new EntitySet<DB_CountryStructure>(new Action<DB_CountryStructure>(this.attach_DB_CountryStructures), new Action<DB_CountryStructure>(this.detach_DB_CountryStructures));
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlledBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ControlledBy
		{
			get
			{
				return this._ControlledBy;
			}
			set
			{
				if ((this._ControlledBy != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlledByChanging(value);
					this.SendPropertyChanging();
					this._ControlledBy = value;
					this.SendPropertyChanged("ControlledBy");
					this.OnControlledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_MapCountry", Storage="_DB_MapCountries", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<DB_MapCountry> DB_MapCountries
		{
			get
			{
				return this._DB_MapCountries;
			}
			set
			{
				this._DB_MapCountries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_CountryForce", Storage="_DB_CountryForces", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<DB_CountryForce> DB_CountryForces
		{
			get
			{
				return this._DB_CountryForces;
			}
			set
			{
				this._DB_CountryForces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_CountryStructure", Storage="_DB_CountryStructures", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<DB_CountryStructure> DB_CountryStructures
		{
			get
			{
				return this._DB_CountryStructures;
			}
			set
			{
				this._DB_CountryStructures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Country", Storage="_DB_User", ThisKey="ControlledBy", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_Countries.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_Countries.Add(this);
						this._ControlledBy = value.Id;
					}
					else
					{
						this._ControlledBy = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_MapCountries(DB_MapCountry entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = this;
		}
		
		private void detach_DB_MapCountries(DB_MapCountry entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = null;
		}
		
		private void attach_DB_CountryForces(DB_CountryForce entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = this;
		}
		
		private void detach_DB_CountryForces(DB_CountryForce entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = null;
		}
		
		private void attach_DB_CountryStructures(DB_CountryStructure entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = this;
		}
		
		private void detach_DB_CountryStructures(DB_CountryStructure entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_CountryForces")]
	public partial class DB_CountryForce : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ForceId;
		
		private System.Guid _CountryId;
		
		private EntityRef<DB_Country> _DB_Country;
		
		private EntityRef<DB_Force> _DB_Force;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForceIdChanging(System.Guid value);
    partial void OnForceIdChanged();
    partial void OnCountryIdChanging(System.Guid value);
    partial void OnCountryIdChanged();
    #endregion
		
		public DB_CountryForce()
		{
			this._DB_Country = default(EntityRef<DB_Country>);
			this._DB_Force = default(EntityRef<DB_Force>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ForceId
		{
			get
			{
				return this._ForceId;
			}
			set
			{
				if ((this._ForceId != value))
				{
					if (this._DB_Force.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForceIdChanging(value);
					this.SendPropertyChanging();
					this._ForceId = value;
					this.SendPropertyChanged("ForceId");
					this.OnForceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._DB_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_CountryForce", Storage="_DB_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public DB_Country DB_Country
		{
			get
			{
				return this._DB_Country.Entity;
			}
			set
			{
				DB_Country previousValue = this._DB_Country.Entity;
				if (((previousValue != value) 
							|| (this._DB_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Country.Entity = null;
						previousValue.DB_CountryForces.Remove(this);
					}
					this._DB_Country.Entity = value;
					if ((value != null))
					{
						value.DB_CountryForces.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Force_DB_CountryForce", Storage="_DB_Force", ThisKey="ForceId", OtherKey="Id", IsForeignKey=true)]
		public DB_Force DB_Force
		{
			get
			{
				return this._DB_Force.Entity;
			}
			set
			{
				DB_Force previousValue = this._DB_Force.Entity;
				if (((previousValue != value) 
							|| (this._DB_Force.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Force.Entity = null;
						previousValue.DB_CountryForces.Remove(this);
					}
					this._DB_Force.Entity = value;
					if ((value != null))
					{
						value.DB_CountryForces.Add(this);
						this._ForceId = value.Id;
					}
					else
					{
						this._ForceId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Force");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Forces")]
	public partial class DB_Force : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private int _DefenceStrength;
		
		private int _OffenceStrength;
		
		private EntitySet<DB_CountryForce> _DB_CountryForces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDefenceStrengthChanging(int value);
    partial void OnDefenceStrengthChanged();
    partial void OnOffenceStrengthChanging(int value);
    partial void OnOffenceStrengthChanged();
    #endregion
		
		public DB_Force()
		{
			this._DB_CountryForces = new EntitySet<DB_CountryForce>(new Action<DB_CountryForce>(this.attach_DB_CountryForces), new Action<DB_CountryForce>(this.detach_DB_CountryForces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefenceStrength", DbType="Int NOT NULL")]
		public int DefenceStrength
		{
			get
			{
				return this._DefenceStrength;
			}
			set
			{
				if ((this._DefenceStrength != value))
				{
					this.OnDefenceStrengthChanging(value);
					this.SendPropertyChanging();
					this._DefenceStrength = value;
					this.SendPropertyChanged("DefenceStrength");
					this.OnDefenceStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffenceStrength", DbType="Int NOT NULL")]
		public int OffenceStrength
		{
			get
			{
				return this._OffenceStrength;
			}
			set
			{
				if ((this._OffenceStrength != value))
				{
					this.OnOffenceStrengthChanging(value);
					this.SendPropertyChanging();
					this._OffenceStrength = value;
					this.SendPropertyChanged("OffenceStrength");
					this.OnOffenceStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Force_DB_CountryForce", Storage="_DB_CountryForces", ThisKey="Id", OtherKey="ForceId")]
		public EntitySet<DB_CountryForce> DB_CountryForces
		{
			get
			{
				return this._DB_CountryForces;
			}
			set
			{
				this._DB_CountryForces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_CountryForces(DB_CountryForce entity)
		{
			this.SendPropertyChanging();
			entity.DB_Force = this;
		}
		
		private void detach_DB_CountryForces(DB_CountryForce entity)
		{
			this.SendPropertyChanging();
			entity.DB_Force = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_CountryStructures")]
	public partial class DB_CountryStructure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CountryId;
		
		private System.Guid _StructureId;
		
		private EntityRef<DB_Country> _DB_Country;
		
		private EntityRef<DB_Structure> _DB_Structure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(System.Guid value);
    partial void OnCountryIdChanged();
    partial void OnStructureIdChanging(System.Guid value);
    partial void OnStructureIdChanged();
    #endregion
		
		public DB_CountryStructure()
		{
			this._DB_Country = default(EntityRef<DB_Country>);
			this._DB_Structure = default(EntityRef<DB_Structure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._DB_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StructureId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StructureId
		{
			get
			{
				return this._StructureId;
			}
			set
			{
				if ((this._StructureId != value))
				{
					if (this._DB_Structure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStructureIdChanging(value);
					this.SendPropertyChanging();
					this._StructureId = value;
					this.SendPropertyChanged("StructureId");
					this.OnStructureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_CountryStructure", Storage="_DB_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public DB_Country DB_Country
		{
			get
			{
				return this._DB_Country.Entity;
			}
			set
			{
				DB_Country previousValue = this._DB_Country.Entity;
				if (((previousValue != value) 
							|| (this._DB_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Country.Entity = null;
						previousValue.DB_CountryStructures.Remove(this);
					}
					this._DB_Country.Entity = value;
					if ((value != null))
					{
						value.DB_CountryStructures.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Structure_DB_CountryStructure", Storage="_DB_Structure", ThisKey="StructureId", OtherKey="Id", IsForeignKey=true)]
		public DB_Structure DB_Structure
		{
			get
			{
				return this._DB_Structure.Entity;
			}
			set
			{
				DB_Structure previousValue = this._DB_Structure.Entity;
				if (((previousValue != value) 
							|| (this._DB_Structure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Structure.Entity = null;
						previousValue.DB_CountryStructures.Remove(this);
					}
					this._DB_Structure.Entity = value;
					if ((value != null))
					{
						value.DB_CountryStructures.Add(this);
						this._StructureId = value.Id;
					}
					else
					{
						this._StructureId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Structure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Structures")]
	public partial class DB_Structure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Effect;
		
		private EntitySet<DB_CountryStructure> _DB_CountryStructures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    #endregion
		
		public DB_Structure()
		{
			this._DB_CountryStructures = new EntitySet<DB_CountryStructure>(new Action<DB_CountryStructure>(this.attach_DB_CountryStructures), new Action<DB_CountryStructure>(this.detach_DB_CountryStructures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Structure_DB_CountryStructure", Storage="_DB_CountryStructures", ThisKey="Id", OtherKey="StructureId")]
		public EntitySet<DB_CountryStructure> DB_CountryStructures
		{
			get
			{
				return this._DB_CountryStructures;
			}
			set
			{
				this._DB_CountryStructures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_CountryStructures(DB_CountryStructure entity)
		{
			this.SendPropertyChanging();
			entity.DB_Structure = this;
		}
		
		private void detach_DB_CountryStructures(DB_CountryStructure entity)
		{
			this.SendPropertyChanging();
			entity.DB_Structure = null;
		}
	}
}
#pragma warning restore 1591
