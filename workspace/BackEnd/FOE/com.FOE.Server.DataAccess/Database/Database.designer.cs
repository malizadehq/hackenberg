#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.Hackenberg.Server.DataAccess.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hackenberg")]
	public partial class HackenbergDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDB_User(DB_User instance);
    partial void UpdateDB_User(DB_User instance);
    partial void DeleteDB_User(DB_User instance);
    partial void InsertDB_Map(DB_Map instance);
    partial void UpdateDB_Map(DB_Map instance);
    partial void DeleteDB_Map(DB_Map instance);
    partial void InsertDB_GameRule(DB_GameRule instance);
    partial void UpdateDB_GameRule(DB_GameRule instance);
    partial void DeleteDB_GameRule(DB_GameRule instance);
    partial void InsertDB_Rule(DB_Rule instance);
    partial void UpdateDB_Rule(DB_Rule instance);
    partial void DeleteDB_Rule(DB_Rule instance);
    partial void InsertDB_GameSession(DB_GameSession instance);
    partial void UpdateDB_GameSession(DB_GameSession instance);
    partial void DeleteDB_GameSession(DB_GameSession instance);
    partial void InsertDB_Force(DB_Force instance);
    partial void UpdateDB_Force(DB_Force instance);
    partial void DeleteDB_Force(DB_Force instance);
    partial void InsertDB_Structure(DB_Structure instance);
    partial void UpdateDB_Structure(DB_Structure instance);
    partial void DeleteDB_Structure(DB_Structure instance);
    partial void InsertDB_Country(DB_Country instance);
    partial void UpdateDB_Country(DB_Country instance);
    partial void DeleteDB_Country(DB_Country instance);
    partial void InsertDB_Game(DB_Game instance);
    partial void UpdateDB_Game(DB_Game instance);
    partial void DeleteDB_Game(DB_Game instance);
    partial void InsertDB_GameSessionMember(DB_GameSessionMember instance);
    partial void UpdateDB_GameSessionMember(DB_GameSessionMember instance);
    partial void DeleteDB_GameSessionMember(DB_GameSessionMember instance);
    partial void InsertDB_LoginSession(DB_LoginSession instance);
    partial void UpdateDB_LoginSession(DB_LoginSession instance);
    partial void DeleteDB_LoginSession(DB_LoginSession instance);
    #endregion
		
		public HackenbergDatabaseDataContext() : 
				base(global::com.Hackenberg.Server.DataAccess.Properties.Settings.Default.HackenbergConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackenbergDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DB_User> DB_Users
		{
			get
			{
				return this.GetTable<DB_User>();
			}
		}
		
		public System.Data.Linq.Table<DB_Map> DB_Maps
		{
			get
			{
				return this.GetTable<DB_Map>();
			}
		}
		
		public System.Data.Linq.Table<DB_GameRule> DB_GameRules
		{
			get
			{
				return this.GetTable<DB_GameRule>();
			}
		}
		
		public System.Data.Linq.Table<DB_Rule> DB_Rules
		{
			get
			{
				return this.GetTable<DB_Rule>();
			}
		}
		
		public System.Data.Linq.Table<DB_GameSession> DB_GameSessions
		{
			get
			{
				return this.GetTable<DB_GameSession>();
			}
		}
		
		public System.Data.Linq.Table<DB_Force> DB_Forces
		{
			get
			{
				return this.GetTable<DB_Force>();
			}
		}
		
		public System.Data.Linq.Table<DB_Structure> DB_Structures
		{
			get
			{
				return this.GetTable<DB_Structure>();
			}
		}
		
		public System.Data.Linq.Table<DB_Country> DB_Countries
		{
			get
			{
				return this.GetTable<DB_Country>();
			}
		}
		
		public System.Data.Linq.Table<DB_Game> DB_Games
		{
			get
			{
				return this.GetTable<DB_Game>();
			}
		}
		
		public System.Data.Linq.Table<DB_GameSessionMember> DB_GameSessionMembers
		{
			get
			{
				return this.GetTable<DB_GameSessionMember>();
			}
		}
		
		public System.Data.Linq.Table<DB_LoginSession> DB_LoginSessions
		{
			get
			{
				return this.GetTable<DB_LoginSession>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Users")]
	public partial class DB_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<DB_Country> _DB_Countries;
		
		private EntitySet<DB_Game> _DB_Games;
		
		private EntitySet<DB_Game> _DB_Games1;
		
		private EntitySet<DB_Game> _DB_Games2;
		
		private EntitySet<DB_Game> _DB_Games3;
		
		private EntitySet<DB_Game> _DB_Games4;
		
		private EntitySet<DB_GameSessionMember> _DB_GameSessionMembers;
		
		private EntitySet<DB_LoginSession> _DB_LoginSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public DB_User()
		{
			this._DB_Countries = new EntitySet<DB_Country>(new Action<DB_Country>(this.attach_DB_Countries), new Action<DB_Country>(this.detach_DB_Countries));
			this._DB_Games = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games), new Action<DB_Game>(this.detach_DB_Games));
			this._DB_Games1 = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games1), new Action<DB_Game>(this.detach_DB_Games1));
			this._DB_Games2 = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games2), new Action<DB_Game>(this.detach_DB_Games2));
			this._DB_Games3 = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games3), new Action<DB_Game>(this.detach_DB_Games3));
			this._DB_Games4 = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games4), new Action<DB_Game>(this.detach_DB_Games4));
			this._DB_GameSessionMembers = new EntitySet<DB_GameSessionMember>(new Action<DB_GameSessionMember>(this.attach_DB_GameSessionMembers), new Action<DB_GameSessionMember>(this.detach_DB_GameSessionMembers));
			this._DB_LoginSessions = new EntitySet<DB_LoginSession>(new Action<DB_LoginSession>(this.attach_DB_LoginSessions), new Action<DB_LoginSession>(this.detach_DB_LoginSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Country", Storage="_DB_Countries", ThisKey="Id", OtherKey="ControlledBy")]
		public EntitySet<DB_Country> DB_Countries
		{
			get
			{
				return this._DB_Countries;
			}
			set
			{
				this._DB_Countries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game", Storage="_DB_Games", ThisKey="Id", OtherKey="AmericanPlayer")]
		public EntitySet<DB_Game> DB_Games
		{
			get
			{
				return this._DB_Games;
			}
			set
			{
				this._DB_Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game1", Storage="_DB_Games1", ThisKey="Id", OtherKey="EnglishPlayer")]
		public EntitySet<DB_Game> DB_Games1
		{
			get
			{
				return this._DB_Games1;
			}
			set
			{
				this._DB_Games1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game2", Storage="_DB_Games2", ThisKey="Id", OtherKey="GermanPlayer")]
		public EntitySet<DB_Game> DB_Games2
		{
			get
			{
				return this._DB_Games2;
			}
			set
			{
				this._DB_Games2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game3", Storage="_DB_Games3", ThisKey="Id", OtherKey="JapanesePlayer")]
		public EntitySet<DB_Game> DB_Games3
		{
			get
			{
				return this._DB_Games3;
			}
			set
			{
				this._DB_Games3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game4", Storage="_DB_Games4", ThisKey="Id", OtherKey="RussianPlayer")]
		public EntitySet<DB_Game> DB_Games4
		{
			get
			{
				return this._DB_Games4;
			}
			set
			{
				this._DB_Games4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_GameSessionMember", Storage="_DB_GameSessionMembers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<DB_GameSessionMember> DB_GameSessionMembers
		{
			get
			{
				return this._DB_GameSessionMembers;
			}
			set
			{
				this._DB_GameSessionMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_LoginSession", Storage="_DB_LoginSessions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<DB_LoginSession> DB_LoginSessions
		{
			get
			{
				return this._DB_LoginSessions;
			}
			set
			{
				this._DB_LoginSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Countries(DB_Country entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_Countries(DB_Country entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
		
		private void attach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
		
		private void attach_DB_Games1(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User1 = this;
		}
		
		private void detach_DB_Games1(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User1 = null;
		}
		
		private void attach_DB_Games2(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User2 = this;
		}
		
		private void detach_DB_Games2(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User2 = null;
		}
		
		private void attach_DB_Games3(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User3 = this;
		}
		
		private void detach_DB_Games3(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User3 = null;
		}
		
		private void attach_DB_Games4(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User4 = this;
		}
		
		private void detach_DB_Games4(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_User4 = null;
		}
		
		private void attach_DB_GameSessionMembers(DB_GameSessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_GameSessionMembers(DB_GameSessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
		
		private void attach_DB_LoginSessions(DB_LoginSession entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_LoginSessions(DB_LoginSession entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Maps")]
	public partial class DB_Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private EntitySet<DB_Country> _DB_Countries;
		
		private EntitySet<DB_Game> _DB_Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DB_Map()
		{
			this._DB_Countries = new EntitySet<DB_Country>(new Action<DB_Country>(this.attach_DB_Countries), new Action<DB_Country>(this.detach_DB_Countries));
			this._DB_Games = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games), new Action<DB_Game>(this.detach_DB_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_Country", Storage="_DB_Countries", ThisKey="Id", OtherKey="MapId")]
		public EntitySet<DB_Country> DB_Countries
		{
			get
			{
				return this._DB_Countries;
			}
			set
			{
				this._DB_Countries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_Game", Storage="_DB_Games", ThisKey="Id", OtherKey="MapId")]
		public EntitySet<DB_Game> DB_Games
		{
			get
			{
				return this._DB_Games;
			}
			set
			{
				this._DB_Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Countries(DB_Country entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = this;
		}
		
		private void detach_DB_Countries(DB_Country entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = null;
		}
		
		private void attach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = this;
		}
		
		private void detach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_Map = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_GameRules")]
	public partial class DB_GameRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RuleId;
		
		private System.Guid _GameId;
		
		private EntityRef<DB_Rule> _DB_Rule;
		
		private EntityRef<DB_Game> _DB_Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIdChanging(System.Guid value);
    partial void OnRuleIdChanged();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    #endregion
		
		public DB_GameRule()
		{
			this._DB_Rule = default(EntityRef<DB_Rule>);
			this._DB_Game = default(EntityRef<DB_Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._DB_Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._DB_Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Rule_DB_GameRule", Storage="_DB_Rule", ThisKey="RuleId", OtherKey="Id", IsForeignKey=true)]
		public DB_Rule DB_Rule
		{
			get
			{
				return this._DB_Rule.Entity;
			}
			set
			{
				DB_Rule previousValue = this._DB_Rule.Entity;
				if (((previousValue != value) 
							|| (this._DB_Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Rule.Entity = null;
						previousValue.DB_GameRules.Remove(this);
					}
					this._DB_Rule.Entity = value;
					if ((value != null))
					{
						value.DB_GameRules.Add(this);
						this._RuleId = value.Id;
					}
					else
					{
						this._RuleId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Rule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Game_DB_GameRule", Storage="_DB_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public DB_Game DB_Game
		{
			get
			{
				return this._DB_Game.Entity;
			}
			set
			{
				DB_Game previousValue = this._DB_Game.Entity;
				if (((previousValue != value) 
							|| (this._DB_Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Game.Entity = null;
						previousValue.DB_GameRules.Remove(this);
					}
					this._DB_Game.Entity = value;
					if ((value != null))
					{
						value.DB_GameRules.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Rules")]
	public partial class DB_Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Effect;
		
		private EntitySet<DB_GameRule> _DB_GameRules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    #endregion
		
		public DB_Rule()
		{
			this._DB_GameRules = new EntitySet<DB_GameRule>(new Action<DB_GameRule>(this.attach_DB_GameRules), new Action<DB_GameRule>(this.detach_DB_GameRules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Rule_DB_GameRule", Storage="_DB_GameRules", ThisKey="Id", OtherKey="RuleId")]
		public EntitySet<DB_GameRule> DB_GameRules
		{
			get
			{
				return this._DB_GameRules;
			}
			set
			{
				this._DB_GameRules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Rule = this;
		}
		
		private void detach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_GameSessions")]
	public partial class DB_GameSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private EntitySet<DB_Game> _DB_Games;
		
		private EntitySet<DB_GameSessionMember> _DB_GameSessionMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public DB_GameSession()
		{
			this._DB_Games = new EntitySet<DB_Game>(new Action<DB_Game>(this.attach_DB_Games), new Action<DB_Game>(this.detach_DB_Games));
			this._DB_GameSessionMembers = new EntitySet<DB_GameSessionMember>(new Action<DB_GameSessionMember>(this.attach_DB_GameSessionMembers), new Action<DB_GameSessionMember>(this.detach_DB_GameSessionMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_GameSession_DB_Game", Storage="_DB_Games", ThisKey="Id", OtherKey="GameSessionId")]
		public EntitySet<DB_Game> DB_Games
		{
			get
			{
				return this._DB_Games;
			}
			set
			{
				this._DB_Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_GameSession_DB_GameSessionMember", Storage="_DB_GameSessionMembers", ThisKey="Id", OtherKey="GameSessionId")]
		public EntitySet<DB_GameSessionMember> DB_GameSessionMembers
		{
			get
			{
				return this._DB_GameSessionMembers;
			}
			set
			{
				this._DB_GameSessionMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_GameSession = this;
		}
		
		private void detach_DB_Games(DB_Game entity)
		{
			this.SendPropertyChanging();
			entity.DB_GameSession = null;
		}
		
		private void attach_DB_GameSessionMembers(DB_GameSessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_GameSession = this;
		}
		
		private void detach_DB_GameSessionMembers(DB_GameSessionMember entity)
		{
			this.SendPropertyChanging();
			entity.DB_GameSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Forces")]
	public partial class DB_Force : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _CountryId;
		
		private string _Name;
		
		private int _DefenceStrength;
		
		private int _OffenceStrength;
		
		private EntityRef<DB_Country> _DB_Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(System.Guid value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDefenceStrengthChanging(int value);
    partial void OnDefenceStrengthChanged();
    partial void OnOffenceStrengthChanging(int value);
    partial void OnOffenceStrengthChanged();
    #endregion
		
		public DB_Force()
		{
			this._DB_Country = default(EntityRef<DB_Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._DB_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefenceStrength", DbType="Int NOT NULL")]
		public int DefenceStrength
		{
			get
			{
				return this._DefenceStrength;
			}
			set
			{
				if ((this._DefenceStrength != value))
				{
					this.OnDefenceStrengthChanging(value);
					this.SendPropertyChanging();
					this._DefenceStrength = value;
					this.SendPropertyChanged("DefenceStrength");
					this.OnDefenceStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffenceStrength", DbType="Int NOT NULL")]
		public int OffenceStrength
		{
			get
			{
				return this._OffenceStrength;
			}
			set
			{
				if ((this._OffenceStrength != value))
				{
					this.OnOffenceStrengthChanging(value);
					this.SendPropertyChanging();
					this._OffenceStrength = value;
					this.SendPropertyChanged("OffenceStrength");
					this.OnOffenceStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_Force", Storage="_DB_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public DB_Country DB_Country
		{
			get
			{
				return this._DB_Country.Entity;
			}
			set
			{
				DB_Country previousValue = this._DB_Country.Entity;
				if (((previousValue != value) 
							|| (this._DB_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Country.Entity = null;
						previousValue.DB_Forces.Remove(this);
					}
					this._DB_Country.Entity = value;
					if ((value != null))
					{
						value.DB_Forces.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Structures")]
	public partial class DB_Structure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _CountryId;
		
		private string _Name;
		
		private string _Effect;
		
		private EntityRef<DB_Country> _DB_Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(System.Guid value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    #endregion
		
		public DB_Structure()
		{
			this._DB_Country = default(EntityRef<DB_Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._DB_Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_Structure", Storage="_DB_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public DB_Country DB_Country
		{
			get
			{
				return this._DB_Country.Entity;
			}
			set
			{
				DB_Country previousValue = this._DB_Country.Entity;
				if (((previousValue != value) 
							|| (this._DB_Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Country.Entity = null;
						previousValue.DB_Structures.Remove(this);
					}
					this._DB_Country.Entity = value;
					if ((value != null))
					{
						value.DB_Structures.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Countries")]
	public partial class DB_Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _MapId;
		
		private System.Guid _ControlledBy;
		
		private string _Name;
		
		private int _Points;
		
		private EntitySet<DB_Force> _DB_Forces;
		
		private EntitySet<DB_Structure> _DB_Structures;
		
		private EntityRef<DB_User> _DB_User;
		
		private EntityRef<DB_Map> _DB_Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnMapIdChanging(System.Guid value);
    partial void OnMapIdChanged();
    partial void OnControlledByChanging(System.Guid value);
    partial void OnControlledByChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public DB_Country()
		{
			this._DB_Forces = new EntitySet<DB_Force>(new Action<DB_Force>(this.attach_DB_Forces), new Action<DB_Force>(this.detach_DB_Forces));
			this._DB_Structures = new EntitySet<DB_Structure>(new Action<DB_Structure>(this.attach_DB_Structures), new Action<DB_Structure>(this.detach_DB_Structures));
			this._DB_User = default(EntityRef<DB_User>);
			this._DB_Map = default(EntityRef<DB_Map>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MapId
		{
			get
			{
				return this._MapId;
			}
			set
			{
				if ((this._MapId != value))
				{
					if (this._DB_Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapIdChanging(value);
					this.SendPropertyChanging();
					this._MapId = value;
					this.SendPropertyChanged("MapId");
					this.OnMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlledBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ControlledBy
		{
			get
			{
				return this._ControlledBy;
			}
			set
			{
				if ((this._ControlledBy != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlledByChanging(value);
					this.SendPropertyChanging();
					this._ControlledBy = value;
					this.SendPropertyChanged("ControlledBy");
					this.OnControlledByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_Force", Storage="_DB_Forces", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<DB_Force> DB_Forces
		{
			get
			{
				return this._DB_Forces;
			}
			set
			{
				this._DB_Forces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Country_DB_Structure", Storage="_DB_Structures", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<DB_Structure> DB_Structures
		{
			get
			{
				return this._DB_Structures;
			}
			set
			{
				this._DB_Structures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Country", Storage="_DB_User", ThisKey="ControlledBy", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_Countries.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_Countries.Add(this);
						this._ControlledBy = value.Id;
					}
					else
					{
						this._ControlledBy = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_Country", Storage="_DB_Map", ThisKey="MapId", OtherKey="Id", IsForeignKey=true)]
		public DB_Map DB_Map
		{
			get
			{
				return this._DB_Map.Entity;
			}
			set
			{
				DB_Map previousValue = this._DB_Map.Entity;
				if (((previousValue != value) 
							|| (this._DB_Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Map.Entity = null;
						previousValue.DB_Countries.Remove(this);
					}
					this._DB_Map.Entity = value;
					if ((value != null))
					{
						value.DB_Countries.Add(this);
						this._MapId = value.Id;
					}
					else
					{
						this._MapId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Map");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Forces(DB_Force entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = this;
		}
		
		private void detach_DB_Forces(DB_Force entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = null;
		}
		
		private void attach_DB_Structures(DB_Structure entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = this;
		}
		
		private void detach_DB_Structures(DB_Structure entity)
		{
			this.SendPropertyChanging();
			entity.DB_Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Games")]
	public partial class DB_Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _GameSessionId;
		
		private System.Guid _MapId;
		
		private System.Nullable<int> _Phase;
		
		private int _Turn;
		
		private string _Name;
		
		private System.Guid _GermanPlayer;
		
		private System.Guid _JapanesePlayer;
		
		private System.Guid _AmericanPlayer;
		
		private System.Guid _EnglishPlayer;
		
		private System.Guid _RussianPlayer;
		
		private EntitySet<DB_GameRule> _DB_GameRules;
		
		private EntityRef<DB_User> _DB_User;
		
		private EntityRef<DB_User> _DB_User1;
		
		private EntityRef<DB_GameSession> _DB_GameSession;
		
		private EntityRef<DB_User> _DB_User2;
		
		private EntityRef<DB_User> _DB_User3;
		
		private EntityRef<DB_User> _DB_User4;
		
		private EntityRef<DB_Map> _DB_Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnGameSessionIdChanging(System.Guid value);
    partial void OnGameSessionIdChanged();
    partial void OnMapIdChanging(System.Guid value);
    partial void OnMapIdChanged();
    partial void OnPhaseChanging(System.Nullable<int> value);
    partial void OnPhaseChanged();
    partial void OnTurnChanging(int value);
    partial void OnTurnChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGermanPlayerChanging(System.Guid value);
    partial void OnGermanPlayerChanged();
    partial void OnJapanesePlayerChanging(System.Guid value);
    partial void OnJapanesePlayerChanged();
    partial void OnAmericanPlayerChanging(System.Guid value);
    partial void OnAmericanPlayerChanged();
    partial void OnEnglishPlayerChanging(System.Guid value);
    partial void OnEnglishPlayerChanged();
    partial void OnRussianPlayerChanging(System.Guid value);
    partial void OnRussianPlayerChanged();
    #endregion
		
		public DB_Game()
		{
			this._DB_GameRules = new EntitySet<DB_GameRule>(new Action<DB_GameRule>(this.attach_DB_GameRules), new Action<DB_GameRule>(this.detach_DB_GameRules));
			this._DB_User = default(EntityRef<DB_User>);
			this._DB_User1 = default(EntityRef<DB_User>);
			this._DB_GameSession = default(EntityRef<DB_GameSession>);
			this._DB_User2 = default(EntityRef<DB_User>);
			this._DB_User3 = default(EntityRef<DB_User>);
			this._DB_User4 = default(EntityRef<DB_User>);
			this._DB_Map = default(EntityRef<DB_Map>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameSessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GameSessionId
		{
			get
			{
				return this._GameSessionId;
			}
			set
			{
				if ((this._GameSessionId != value))
				{
					if (this._DB_GameSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameSessionIdChanging(value);
					this.SendPropertyChanging();
					this._GameSessionId = value;
					this.SendPropertyChanged("GameSessionId");
					this.OnGameSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MapId
		{
			get
			{
				return this._MapId;
			}
			set
			{
				if ((this._MapId != value))
				{
					if (this._DB_Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapIdChanging(value);
					this.SendPropertyChanging();
					this._MapId = value;
					this.SendPropertyChanged("MapId");
					this.OnMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phase", DbType="Int")]
		public System.Nullable<int> Phase
		{
			get
			{
				return this._Phase;
			}
			set
			{
				if ((this._Phase != value))
				{
					this.OnPhaseChanging(value);
					this.SendPropertyChanging();
					this._Phase = value;
					this.SendPropertyChanged("Phase");
					this.OnPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Turn", DbType="Int NOT NULL")]
		public int Turn
		{
			get
			{
				return this._Turn;
			}
			set
			{
				if ((this._Turn != value))
				{
					this.OnTurnChanging(value);
					this.SendPropertyChanging();
					this._Turn = value;
					this.SendPropertyChanged("Turn");
					this.OnTurnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GermanPlayer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GermanPlayer
		{
			get
			{
				return this._GermanPlayer;
			}
			set
			{
				if ((this._GermanPlayer != value))
				{
					if (this._DB_User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGermanPlayerChanging(value);
					this.SendPropertyChanging();
					this._GermanPlayer = value;
					this.SendPropertyChanged("GermanPlayer");
					this.OnGermanPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JapanesePlayer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JapanesePlayer
		{
			get
			{
				return this._JapanesePlayer;
			}
			set
			{
				if ((this._JapanesePlayer != value))
				{
					if (this._DB_User3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJapanesePlayerChanging(value);
					this.SendPropertyChanging();
					this._JapanesePlayer = value;
					this.SendPropertyChanged("JapanesePlayer");
					this.OnJapanesePlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmericanPlayer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AmericanPlayer
		{
			get
			{
				return this._AmericanPlayer;
			}
			set
			{
				if ((this._AmericanPlayer != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAmericanPlayerChanging(value);
					this.SendPropertyChanging();
					this._AmericanPlayer = value;
					this.SendPropertyChanged("AmericanPlayer");
					this.OnAmericanPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishPlayer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EnglishPlayer
		{
			get
			{
				return this._EnglishPlayer;
			}
			set
			{
				if ((this._EnglishPlayer != value))
				{
					if (this._DB_User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnglishPlayerChanging(value);
					this.SendPropertyChanging();
					this._EnglishPlayer = value;
					this.SendPropertyChanged("EnglishPlayer");
					this.OnEnglishPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RussianPlayer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RussianPlayer
		{
			get
			{
				return this._RussianPlayer;
			}
			set
			{
				if ((this._RussianPlayer != value))
				{
					if (this._DB_User4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRussianPlayerChanging(value);
					this.SendPropertyChanging();
					this._RussianPlayer = value;
					this.SendPropertyChanged("RussianPlayer");
					this.OnRussianPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Game_DB_GameRule", Storage="_DB_GameRules", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<DB_GameRule> DB_GameRules
		{
			get
			{
				return this._DB_GameRules;
			}
			set
			{
				this._DB_GameRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game", Storage="_DB_User", ThisKey="AmericanPlayer", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_Games.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_Games.Add(this);
						this._AmericanPlayer = value.Id;
					}
					else
					{
						this._AmericanPlayer = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game1", Storage="_DB_User1", ThisKey="EnglishPlayer", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User1
		{
			get
			{
				return this._DB_User1.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User1.Entity;
				if (((previousValue != value) 
							|| (this._DB_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User1.Entity = null;
						previousValue.DB_Games1.Remove(this);
					}
					this._DB_User1.Entity = value;
					if ((value != null))
					{
						value.DB_Games1.Add(this);
						this._EnglishPlayer = value.Id;
					}
					else
					{
						this._EnglishPlayer = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_GameSession_DB_Game", Storage="_DB_GameSession", ThisKey="GameSessionId", OtherKey="Id", IsForeignKey=true)]
		public DB_GameSession DB_GameSession
		{
			get
			{
				return this._DB_GameSession.Entity;
			}
			set
			{
				DB_GameSession previousValue = this._DB_GameSession.Entity;
				if (((previousValue != value) 
							|| (this._DB_GameSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_GameSession.Entity = null;
						previousValue.DB_Games.Remove(this);
					}
					this._DB_GameSession.Entity = value;
					if ((value != null))
					{
						value.DB_Games.Add(this);
						this._GameSessionId = value.Id;
					}
					else
					{
						this._GameSessionId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_GameSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game2", Storage="_DB_User2", ThisKey="GermanPlayer", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User2
		{
			get
			{
				return this._DB_User2.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User2.Entity;
				if (((previousValue != value) 
							|| (this._DB_User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User2.Entity = null;
						previousValue.DB_Games2.Remove(this);
					}
					this._DB_User2.Entity = value;
					if ((value != null))
					{
						value.DB_Games2.Add(this);
						this._GermanPlayer = value.Id;
					}
					else
					{
						this._GermanPlayer = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game3", Storage="_DB_User3", ThisKey="JapanesePlayer", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User3
		{
			get
			{
				return this._DB_User3.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User3.Entity;
				if (((previousValue != value) 
							|| (this._DB_User3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User3.Entity = null;
						previousValue.DB_Games3.Remove(this);
					}
					this._DB_User3.Entity = value;
					if ((value != null))
					{
						value.DB_Games3.Add(this);
						this._JapanesePlayer = value.Id;
					}
					else
					{
						this._JapanesePlayer = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Game4", Storage="_DB_User4", ThisKey="RussianPlayer", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User4
		{
			get
			{
				return this._DB_User4.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User4.Entity;
				if (((previousValue != value) 
							|| (this._DB_User4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User4.Entity = null;
						previousValue.DB_Games4.Remove(this);
					}
					this._DB_User4.Entity = value;
					if ((value != null))
					{
						value.DB_Games4.Add(this);
						this._RussianPlayer = value.Id;
					}
					else
					{
						this._RussianPlayer = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User4");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Map_DB_Game", Storage="_DB_Map", ThisKey="MapId", OtherKey="Id", IsForeignKey=true)]
		public DB_Map DB_Map
		{
			get
			{
				return this._DB_Map.Entity;
			}
			set
			{
				DB_Map previousValue = this._DB_Map.Entity;
				if (((previousValue != value) 
							|| (this._DB_Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Map.Entity = null;
						previousValue.DB_Games.Remove(this);
					}
					this._DB_Map.Entity = value;
					if ((value != null))
					{
						value.DB_Games.Add(this);
						this._MapId = value.Id;
					}
					else
					{
						this._MapId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_Map");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Game = this;
		}
		
		private void detach_DB_GameRules(DB_GameRule entity)
		{
			this.SendPropertyChanging();
			entity.DB_Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_GameSessionMembers")]
	public partial class DB_GameSessionMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameSessionId;
		
		private System.Guid _UserId;
		
		private EntityRef<DB_GameSession> _DB_GameSession;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameSessionIdChanging(System.Guid value);
    partial void OnGameSessionIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public DB_GameSessionMember()
		{
			this._DB_GameSession = default(EntityRef<DB_GameSession>);
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameSessionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameSessionId
		{
			get
			{
				return this._GameSessionId;
			}
			set
			{
				if ((this._GameSessionId != value))
				{
					if (this._DB_GameSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameSessionIdChanging(value);
					this.SendPropertyChanging();
					this._GameSessionId = value;
					this.SendPropertyChanged("GameSessionId");
					this.OnGameSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_GameSession_DB_GameSessionMember", Storage="_DB_GameSession", ThisKey="GameSessionId", OtherKey="Id", IsForeignKey=true)]
		public DB_GameSession DB_GameSession
		{
			get
			{
				return this._DB_GameSession.Entity;
			}
			set
			{
				DB_GameSession previousValue = this._DB_GameSession.Entity;
				if (((previousValue != value) 
							|| (this._DB_GameSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_GameSession.Entity = null;
						previousValue.DB_GameSessionMembers.Remove(this);
					}
					this._DB_GameSession.Entity = value;
					if ((value != null))
					{
						value.DB_GameSessionMembers.Add(this);
						this._GameSessionId = value.Id;
					}
					else
					{
						this._GameSessionId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_GameSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_GameSessionMember", Storage="_DB_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_GameSessionMembers.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_GameSessionMembers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_LoginSessions")]
	public partial class DB_LoginSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UserId;
		
		private System.Nullable<System.DateTime> _Timeout;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnTimeoutChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeoutChanged();
    #endregion
		
		public DB_LoginSession()
		{
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timeout", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timeout
		{
			get
			{
				return this._Timeout;
			}
			set
			{
				if ((this._Timeout != value))
				{
					this.OnTimeoutChanging(value);
					this.SendPropertyChanging();
					this._Timeout = value;
					this.SendPropertyChanged("Timeout");
					this.OnTimeoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_LoginSession", Storage="_DB_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_LoginSessions.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_LoginSessions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
